// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NursingEducationalBackend.Models;

#nullable disable

namespace NursingEducationalBackend.Migrations
{
    [DbContext(typeof(NursingDbContext))]
    [Migration("20250520183330_RenamePronounceToPronounsField")]
    partial class RenamePronounceToPronounsField
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NursingEducationalBackend.Models.Adl", b =>
                {
                    b.Property<int>("AdlsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ADLsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdlsId"));

                    b.Property<DateTime?>("BathDate")
                        .HasColumnType("date");

                    b.Property<string>("FootCare")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HairCare")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Teeth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TubShowerOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TurningSchedule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOfCare")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdlsId");

                    b.ToTable("ADLs", (string)null);
                });

            modelBuilder.Entity("NursingEducationalBackend.Models.Behaviour", b =>
                {
                    b.Property<int>("BehaviourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BehaviourID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BehaviourId"));

                    b.Property<string>("Report")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BehaviourId");

                    b.ToTable("Behaviour", (string)null);
                });

            modelBuilder.Entity("NursingEducationalBackend.Models.ChangeHistory", b =>
                {
                    b.Property<int>("ChangeHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChangeHistoryId"));

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ChangeHistoryId");

                    b.ToTable("ChangeHistory");
                });

            modelBuilder.Entity("NursingEducationalBackend.Models.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClassID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"));

                    b.Property<string>("Campus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int")
                        .HasColumnName("InstructorID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("ClassId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Class", (string)null);
                });

            modelBuilder.Entity("NursingEducationalBackend.Models.Cognitive", b =>
                {
                    b.Property<int>("CognitiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CognitiveID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CognitiveId"));

                    b.Property<string>("Confusion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Loc")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LOC");

                    b.Property<string>("Mmse")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MMSE");

                    b.Property<string>("Speech")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CognitiveId");

                    b.ToTable("Cognitive", (string)null);
                });

            modelBuilder.Entity("NursingEducationalBackend.Models.Elimination", b =>
                {
                    b.Property<int>("EliminationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EliminationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EliminationId"));

                    b.Property<string>("BladderRoutine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BowelRoutine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CatheterInsertion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("CatheterInsertionDate")
                        .HasColumnType("date");

                    b.Property<string>("DayOrNightProduct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncontinentOfBladder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncontinentOfBowel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastBowelMovement")
                        .HasColumnType("datetime2");

                    b.HasKey("EliminationId");

                    b.ToTable("Elimination", (string)null);
                });

            modelBuilder.Entity("NursingEducationalBackend.Models.Mobility", b =>
                {
                    b.Property<int>("MobilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MobilityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MobilityId"));

                    b.Property<string>("Aids")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BedMobility")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Transfer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MobilityId");

                    b.ToTable("Mobility", (string)null);
                });

            modelBuilder.Entity("NursingEducationalBackend.Models.Nurse", b =>
                {
                    b.Property<int>("NurseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NurseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NurseId"));

                    b.Property<string>("Campus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("ClassID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NurseId");

                    b.HasIndex("ClassId");

                    b.HasIndex(new[] { "PatientId" }, "IX_Nurse_PatientID")
                        .IsUnique()
                        .HasFilter("[PatientID] IS NOT NULL");

                    b.ToTable("Nurse", (string)null);
                });

            modelBuilder.Entity("NursingEducationalBackend.Models.Nutrition", b =>
                {
                    b.Property<int>("NutritionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NutritionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NutritionId"));

                    b.Property<string>("Assist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Diet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DietarySupplementInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Intake")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IvSolutionRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialNeeds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("NutritionId");

                    b.ToTable("Nutrition", (string)null);
                });

            modelBuilder.Entity("NursingEducationalBackend.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<DateOnly>("AdmissionDate")
                        .HasColumnType("date");

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BedNumber")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("DischargeDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageFilename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsolationPrecautions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NextOfKin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NextOfKinPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NurseId")
                        .HasColumnType("int")
                        .HasColumnName("NurseID");

                    b.Property<string>("PatientWristId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PatientWristID");

                    b.Property<string>("Pronouns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoamAlertBracelet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("PatientId");

                    b.HasIndex("NurseId");

                    b.HasIndex("PatientWristId")
                        .IsUnique();

                    b.HasIndex(new[] { "PatientId" }, "IX_Patient_PatientID")
                        .IsUnique();

                    b.ToTable("Patient", (string)null);
                });

            modelBuilder.Entity("NursingEducationalBackend.Models.ProgressNote", b =>
                {
                    b.Property<int>("ProgressNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProgressNoteID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgressNoteId"));

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ProgressNoteId");

                    b.ToTable("ProgressNote", (string)null);
                });

            modelBuilder.Entity("NursingEducationalBackend.Models.Record", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<int?>("AdlsId")
                        .HasColumnType("int")
                        .HasColumnName("ADLsID");

                    b.Property<int?>("BehaviourId")
                        .HasColumnType("int")
                        .HasColumnName("BehaviourID");

                    b.Property<int?>("CognitiveId")
                        .HasColumnType("int")
                        .HasColumnName("CognitiveID");

                    b.Property<int?>("EliminationId")
                        .HasColumnType("int")
                        .HasColumnName("EliminationID");

                    b.Property<int?>("MobilityId")
                        .HasColumnType("int")
                        .HasColumnName("MobilityID");

                    b.Property<int?>("NutritionId")
                        .HasColumnType("int")
                        .HasColumnName("NutritionID");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("ProgressNoteId")
                        .HasColumnType("int")
                        .HasColumnName("ProgressNoteID");

                    b.Property<int?>("SafetyId")
                        .HasColumnType("int")
                        .HasColumnName("SafetyID");

                    b.Property<int?>("SkinId")
                        .HasColumnType("int")
                        .HasColumnName("SkinID");

                    b.HasKey("RecordId");

                    b.HasIndex("AdlsId");

                    b.HasIndex("BehaviourId");

                    b.HasIndex("CognitiveId");

                    b.HasIndex("EliminationId");

                    b.HasIndex("MobilityId");

                    b.HasIndex("NutritionId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ProgressNoteId");

                    b.HasIndex("SafetyId");

                    b.HasIndex("SkinId");

                    b.ToTable("Record", (string)null);
                });

            modelBuilder.Entity("NursingEducationalBackend.Models.Safety", b =>
                {
                    b.Property<int>("SafetyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SafetyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SafetyId"));

                    b.Property<string>("BedAlarm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CrashMats")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FallRiskScale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HipProtectors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SideRails")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SafetyId");

                    b.ToTable("Safety", (string)null);
                });

            modelBuilder.Entity("NursingEducationalBackend.Models.SkinAndSensoryAid", b =>
                {
                    b.Property<int>("SkinAndSensoryAidsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SkinAndSensoryAidsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkinAndSensoryAidsId"));

                    b.Property<string>("Glasses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hearing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkinIntegrityBradenScale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkinIntegrityDressings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkinIntegrityPressureUlcerRisk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkinIntegrityTurningSchedule")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkinAndSensoryAidsId");

                    b.ToTable("SkinAndSensoryAids");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NursingEducationalBackend.Models.Class", b =>
                {
                    b.HasOne("NursingEducationalBackend.Models.Nurse", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("NursingEducationalBackend.Models.Nurse", b =>
                {
                    b.HasOne("NursingEducationalBackend.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Class");
                });

            modelBuilder.Entity("NursingEducationalBackend.Models.Patient", b =>
                {
                    b.HasOne("NursingEducationalBackend.Models.Nurse", "Nurse")
                        .WithMany("Patients")
                        .HasForeignKey("NurseId");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("NursingEducationalBackend.Models.Record", b =>
                {
                    b.HasOne("NursingEducationalBackend.Models.Adl", "Adl")
                        .WithMany()
                        .HasForeignKey("AdlsId");

                    b.HasOne("NursingEducationalBackend.Models.Behaviour", "Behaviour")
                        .WithMany()
                        .HasForeignKey("BehaviourId");

                    b.HasOne("NursingEducationalBackend.Models.Cognitive", "Cognitive")
                        .WithMany()
                        .HasForeignKey("CognitiveId");

                    b.HasOne("NursingEducationalBackend.Models.Elimination", "Elimination")
                        .WithMany()
                        .HasForeignKey("EliminationId");

                    b.HasOne("NursingEducationalBackend.Models.Mobility", "Mobility")
                        .WithMany()
                        .HasForeignKey("MobilityId");

                    b.HasOne("NursingEducationalBackend.Models.Nutrition", "Nutrition")
                        .WithMany()
                        .HasForeignKey("NutritionId");

                    b.HasOne("NursingEducationalBackend.Models.Patient", "Patient")
                        .WithMany("Records")
                        .HasForeignKey("PatientId");

                    b.HasOne("NursingEducationalBackend.Models.ProgressNote", "ProgressNote")
                        .WithMany()
                        .HasForeignKey("ProgressNoteId");

                    b.HasOne("NursingEducationalBackend.Models.Safety", "Safety")
                        .WithMany()
                        .HasForeignKey("SafetyId");

                    b.HasOne("NursingEducationalBackend.Models.SkinAndSensoryAid", "SkinAndSensoryAid")
                        .WithMany()
                        .HasForeignKey("SkinId");

                    b.Navigation("Adl");

                    b.Navigation("Behaviour");

                    b.Navigation("Cognitive");

                    b.Navigation("Elimination");

                    b.Navigation("Mobility");

                    b.Navigation("Nutrition");

                    b.Navigation("Patient");

                    b.Navigation("ProgressNote");

                    b.Navigation("Safety");

                    b.Navigation("SkinAndSensoryAid");
                });

            modelBuilder.Entity("NursingEducationalBackend.Models.Class", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("NursingEducationalBackend.Models.Nurse", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("NursingEducationalBackend.Models.Patient", b =>
                {
                    b.Navigation("Records");
                });
#pragma warning restore 612, 618
        }
    }
}
